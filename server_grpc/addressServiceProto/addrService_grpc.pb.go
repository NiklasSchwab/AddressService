// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: addrService.proto

package addressServiceProto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AddressServiceClient is the client API for AddressService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AddressServiceClient interface {
	LookupAddress(ctx context.Context, in *Person, opts ...grpc.CallOption) (*Address, error)
	GetAllAddresses(ctx context.Context, in *Empty, opts ...grpc.CallOption) (AddressService_GetAllAddressesClient, error)
	GetAddressList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AddressList, error)
}

type addressServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAddressServiceClient(cc grpc.ClientConnInterface) AddressServiceClient {
	return &addressServiceClient{cc}
}

func (c *addressServiceClient) LookupAddress(ctx context.Context, in *Person, opts ...grpc.CallOption) (*Address, error) {
	out := new(Address)
	err := c.cc.Invoke(ctx, "/AddressService/LookupAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) GetAllAddresses(ctx context.Context, in *Empty, opts ...grpc.CallOption) (AddressService_GetAllAddressesClient, error) {
	stream, err := c.cc.NewStream(ctx, &AddressService_ServiceDesc.Streams[0], "/AddressService/GetAllAddresses", opts...)
	if err != nil {
		return nil, err
	}
	x := &addressServiceGetAllAddressesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AddressService_GetAllAddressesClient interface {
	Recv() (*Address, error)
	grpc.ClientStream
}

type addressServiceGetAllAddressesClient struct {
	grpc.ClientStream
}

func (x *addressServiceGetAllAddressesClient) Recv() (*Address, error) {
	m := new(Address)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *addressServiceClient) GetAddressList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AddressList, error) {
	out := new(AddressList)
	err := c.cc.Invoke(ctx, "/AddressService/GetAddressList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AddressServiceServer is the server API for AddressService service.
// All implementations must embed UnimplementedAddressServiceServer
// for forward compatibility
type AddressServiceServer interface {
	LookupAddress(context.Context, *Person) (*Address, error)
	GetAllAddresses(*Empty, AddressService_GetAllAddressesServer) error
	GetAddressList(context.Context, *Empty) (*AddressList, error)
	mustEmbedUnimplementedAddressServiceServer()
}

// UnimplementedAddressServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAddressServiceServer struct {
}

func (UnimplementedAddressServiceServer) LookupAddress(context.Context, *Person) (*Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupAddress not implemented")
}
func (UnimplementedAddressServiceServer) GetAllAddresses(*Empty, AddressService_GetAllAddressesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllAddresses not implemented")
}
func (UnimplementedAddressServiceServer) GetAddressList(context.Context, *Empty) (*AddressList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressList not implemented")
}
func (UnimplementedAddressServiceServer) mustEmbedUnimplementedAddressServiceServer() {}

// UnsafeAddressServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AddressServiceServer will
// result in compilation errors.
type UnsafeAddressServiceServer interface {
	mustEmbedUnimplementedAddressServiceServer()
}

func RegisterAddressServiceServer(s grpc.ServiceRegistrar, srv AddressServiceServer) {
	s.RegisterService(&AddressService_ServiceDesc, srv)
}

func _AddressService_LookupAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Person)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).LookupAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AddressService/LookupAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).LookupAddress(ctx, req.(*Person))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_GetAllAddresses_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AddressServiceServer).GetAllAddresses(m, &addressServiceGetAllAddressesServer{stream})
}

type AddressService_GetAllAddressesServer interface {
	Send(*Address) error
	grpc.ServerStream
}

type addressServiceGetAllAddressesServer struct {
	grpc.ServerStream
}

func (x *addressServiceGetAllAddressesServer) Send(m *Address) error {
	return x.ServerStream.SendMsg(m)
}

func _AddressService_GetAddressList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).GetAddressList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AddressService/GetAddressList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).GetAddressList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// AddressService_ServiceDesc is the grpc.ServiceDesc for AddressService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AddressService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AddressService",
	HandlerType: (*AddressServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LookupAddress",
			Handler:    _AddressService_LookupAddress_Handler,
		},
		{
			MethodName: "GetAddressList",
			Handler:    _AddressService_GetAddressList_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllAddresses",
			Handler:       _AddressService_GetAllAddresses_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "addrService.proto",
}
